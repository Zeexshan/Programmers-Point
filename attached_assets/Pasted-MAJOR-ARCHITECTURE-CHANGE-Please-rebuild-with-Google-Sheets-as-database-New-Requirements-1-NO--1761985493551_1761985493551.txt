MAJOR ARCHITECTURE CHANGE - Please rebuild with Google Sheets as database:🎯 New Requirements:1. NO Backend Server Needed

Pure frontend React app only
Deploys to Netlify (static hosting)
All data stored in Google Sheets
Frontend directly reads/writes to Google Sheets API
2. Technology Stack:
Frontend: React + Vite + Tailwind CSS
Hosting: Netlify (I'll deploy myself)
Database: Google Sheets API v4
Authentication: Simple password check (stored in frontend)
Drag-Drop: @dnd-kit/core
NO: Node.js backend, Express, PostgreSQL, MongoDB📊 Google Sheets Setup:Create ONE spreadsheet: "Programmers Point Database"5 Sheets inside it:Sheet 1: "Technologies"
Columns:

Technology (string)
Main Category (Frontend/Backend/Database/Other)
Sub Category (string)
Display Order (number)
Vacancies (number)
Fresher Package (string: "2-4 LPA")
Experienced Package (string: "4-8 LPA")
Top Companies (string: comma-separated)
Popularity Score (1-10)
Description (string)
Sheet 2: "Combinations"
Columns:

Technologies (string: comma-separated like "React.js, Node.js, MongoDB")
Job Role (string)
Category (Frontend/Backend/Full Stack/Other)
Vacancies (number)
Fresher Package (string)
Experienced Package (string)
Top Companies (string: comma-separated)
Popularity Score (1-10)
Sheet 3: "Companies"
Columns:

Company Name
Logo URL (use clearbit.com/logo or placeholder)
Total Placements (number)
Avg Package (string)
Sheet 4: "Placements"
Columns:

Student Name
Company (must match Sheet 3)
Package (string)
Phone (string: +91XXXXXXXXXX)
Photo URL (use pravatar.cc or placeholder)
Profile (job title)
Course (what they learned)
Review (testimonial)
Joining Date (string)
Sheet 5: "Inquiries"
Columns:

Timestamp (auto-generated)
Name
Father Name
Phone
Email
DOB
Course Interest
College
Branch
Status (Pending/Joined)
🔑 Google Sheets API Integration:React app should:
Read data on page load:

javascript// Read all technologies
const technologies = await fetchSheetData('Technologies');

// Read all combinations
const combinations = await fetchSheetData('Combinations');

// Read all companies
const companies = await fetchSheetData('Companies');

// Read all placements
const placements = await fetchSheetData('Placements');
Write inquiry form data:

javascript// When student submits form
await appendToSheet('Inquiries', {
  timestamp: new Date().toISOString(),
  name: formData.name,
  fatherName: formData.fatherName,
  phone: formData.phone,
  email: formData.email,
  dob: formData.dob,
  courseInterest: formData.course,
  college: formData.college,
  branch: formData.branch,
  status: 'Pending'
});
Cache data in localStorage:

javascript// Cache for 1 hour to reduce API calls
localStorage.setItem('technologies', JSON.stringify(data));
localStorage.setItem('cacheTime', Date.now());

// Check cache before fetching
const cacheTime = localStorage.getItem('cacheTime');
if (Date.now() - cacheTime < 3600000) { // 1 hour
  // Use cached data
} else {
  // Fetch fresh data
}🎨 Features to Implement:1. Course Explorer (Main Feature)

Show technologies grouped by category
Drag and drop to select multiple
When technologies selected:

First check Sheet 2 "Combinations" for exact match
If no match, calculate from individual technologies (Sheet 1)
Display: Job Role, Vacancies, Packages, Companies


2. Inquiry Form

All fields with validation
On submit → append to Sheet 5 "Inquiries"
Show success message
Email/WhatsApp notification (optional)
3. Placement Showcase

Read Sheet 3 (Companies) - show company cards
Click company → filter Sheet 4 (Placements) by that company
Show student cards with details
Phone numbers masked, show button to reveal
4. Admin Panel (Simple)

Password protection (check against hardcoded password)
View inquiries from Sheet 5
Mark as "Joined" (update cell in Google Sheets)
Export phone numbers of "Pending" students
5. Edit Technologies (Optional)

Since data is in Google Sheets, I can edit directly in Sheets
No need for complex admin UI
Just add "Refresh Data" button to fetch latest from Sheets
🔐 Authentication:For Admin Panel:
javascript// Simple password check (no backend needed)
const ADMIN_PASSWORD = "admin123"; // Or store in .env

function checkPassword(inputPassword) {
  return inputPassword === ADMIN_PASSWORD;
}Google Sheets API Key:
javascript// Use API key (not OAuth) for read-only public access
const API_KEY = process.env.VITE_GOOGLE_API_KEY;

// For write access (inquiry forms), use service account
const SERVICE_ACCOUNT = {
  client_email: process.env.VITE_SERVICE_ACCOUNT_EMAIL,
  private_key: process.env.VITE_PRIVATE_KEY
};📦 What to Deliver:
React app folder (client/)

All components
Google Sheets API helper functions
Environment variables template (.env.example)



README.md with:

How to set up Google Sheets
How to get API credentials
How to deploy to Netlify
How to edit data in Google Sheets



Google Sheets Template

Shareable template link
Pre-formatted with all columns
Sample data included


🎯 Data Management Workflow:To Add New Technology:

Open Google Sheet
Go to "Technologies" sheet
Add new row with all columns
Students see it next time they refresh app (cached for 1 hour)
To Add New Student Placement:

Open Google Sheet
Go to "Placements" sheet
Add new row
Upload photo to imgur.com or use pravatar.cc
Students see it immediately
To Update Packages:

Open "Technologies" sheet
Edit "Fresher Package" or "Experienced Package" column
Save
Changes appear after cache expires (1 hour) or manual refresh
To View Inquiries:

Open "Inquiries" sheet
See all form submissions
Copy phone numbers for WhatsApp broadcast
Update "Status" column to "Joined" when they enroll
⚡ Performance Optimization:
Cache Google Sheets data in localStorage (1 hour)
Lazy load images
Compress images using clearbit.com or tinypng
Use React.memo for components
Load inquiry form only when needed
💰 Cost: $0/month ForeverServiceWhat It DoesCostNetlifyHosts React app$0 (100GB bandwidth)Google SheetsDatabase$0 (unlimited rows)Google Sheets APIRead/write data$0 (500 req/day free)Total$0/monthLimits:

Google Sheets API: 500 requests/day (with caching, easily handles 100+ students/day)
Netlify: 100GB bandwidth/month (more than enough)
🚀 Deployment Process:
I give you Google Sheets ID
You build React app using that Sheet
I test locally
I deploy to Netlify myself (drag & drop build folder)
Done! App live at: programmers-point.netlify.app
